/*
===============================================================================
 Name        : Capstone.c
 Author      : $(author)
 Version     :
 Copyright   : $(copyright)
 Description : main definition
===============================================================================
*/

// ColorSensorInput address 0100 000, 0x12

#ifdef __USE_CMSIS
#include "LPC17xx.h"
#endif

 

#include <cr_section_macros.h>

// TODO: insert other include files here
//set up FIO and PLL for use
struct FIOstruct {
    unsigned int DIR;
    unsigned int filler[3]; // so MASK has offset 0x10 from DIR
    unsigned int MASK;
    unsigned int PIN;
    unsigned int SET;
    unsigned int CLR;
};

struct I2struct {
    unsigned int CONSET;
    unsigned int STAT;
    unsigned int DAT;
    unsigned int ADR0;
    unsigned int SCLH;
    unsigned int SCLL;
    unsigned int CONCLR;
    unsigned int MMCCTRL;
    unsigned int ADR1;
    unsigned int ADR2;
    unsigned int ADR3;
    unsigned int DATA_BUFFER;
    unsigned int MASK0;
    unsigned int MASK1;
    unsigned int MASK2;
    unsigned int MASK3;
};
// TODO: insert other definitions and declarations here
#define FIO ((volatile struct FIOstruct *)0x2009c000)
#define I2 ((volatile struct I2struct *)0x4001C000)
#define PCLKSEL0  (*(volatile unsigned int *)0x400FC1A8)
#define PINSEL1   (*(volatile unsigned int *)0x4002C004)
#define PINMODE0 (*(volatile unsigned int *)0x4002c040)
#define FIO2PIN (*(volatile unsigned int *)0x2009c054)

enum operatingModes{Temp,Color,Sleep};

void wait_ticks(int ticks)
{
    volatile int count;
    for (count=0; count<ticks; count++){
        //do nothing
    }//for (count=0...)
}//void wait_ticks

void waitForSi(){
    while(((I2[0].CONSET>>3)&1)==0){
        //Do nothing until SI changes
    }
}

void setI2CClockSource(int mode){ //Gives a slightly easier way to set Clock Source
    switch(mode){
        case 0:
            //Sets IRC as CClk/4
            PCLKSEL0&=~(1<<15)&~(1<<14);
        break;
        case 1:
            //Sets IRC as CClk/1
            PCLKSEL0&=~(1<<15);
            PCLKSEL0|=(1<<14);
        break;
        case 10:
            //Sets IRC as CClk/2
            PCLKSEL0&=~(1<<14);
            PCLKSEL0|=(1<<15);
        break;
        case 11:
            //Sets IRC as CClk/8
            PCLKSEL0|=(1<<15)|(1<<14);
        break;
        default:
            //if not one of the 4 modes, do nothing
        break;
    }
    return;
}

void setUpI2C() {
    PINSEL1 |= (1<<22) | (1<<24);
    PINSEL1 &= ~(1<<23) & ~(1<<25);
    setI2CClockSource(0);
    //set I2C SCLL
    I2[0].SCLL = 13;
    //set to 50% duty cycle
    I2[0].SCLH = 13;
    //Clear System
    I2[0].CONCLR=(1<<6);
    //enable I2C
    I2[0].CONSET = (1<<6);
}

void I2CDataSend(int data, int deviceAddress, int regAddress){
    //Send Start
    I2[0].CONSET=(1<<3);
    I2[0].CONSET=(1<<5);
    I2[0].CONCLR=(1<<3);
    waitForSi();
    I2[0].CONCLR=(1<<5);
    //Send Message From Here
    //First send devAdd << 1
    I2[0].DAT=deviceAddress<<1;
    I2[0].CONCLR=(1<<3);
    waitForSi();
    //then send Reg Add
    I2[0].DAT=regAddress;
    I2[0].CONCLR=(1<<3);
    waitForSi();
    //then send Data.
    I2[0].DAT=data;
    I2[0].CONCLR=(1<<3);
    waitForSi();
    //Stop Sending Data
    I2[0].CONSET=(1<<4);
    I2[0].CONCLR=(1<<3);
    while(((I2[0].CONSET>>4)&1)==1){
        //Do nothing until STO is 0
    }
}

int I2CDataRead(int deviceAddress, int regAddress){
    int dataRead[2];
    int dataReturn;
    //Send Start
    I2[0].CONSET=(1<<3);
    I2[0].CONSET=(1<<5);
    I2[0].CONCLR=(1<<3);
    waitForSi();
    I2[0].CONCLR=(1<<5);
    //First send devAdd << 1 +1 to indicate read mode
    I2[0].DAT=(deviceAddress<<1);
    I2[0].CONCLR=(1<<3);
    waitForSi();
    //then send Reg Add
    I2[0].DAT=regAddress;
    I2[0].CONCLR=(1<<3);
    waitForSi();
    //send new start
    I2[0].CONSET|=(1<<5);
    I2[0].CONCLR=(1<<3);
    waitForSi();
    I2[0].CONCLR=(1<<5);
    I2[0].DAT=(deviceAddress<<1)+1;
    I2[0].CONCLR=(1<<3);
    waitForSi();
    //get 1st Data
    I2[0].CONSET=(1<<2);
    I2[0].CONCLR=(1<<3);
    waitForSi();
    dataRead[0] = I2[0].DAT;
    //get 2nd Data
    I2[0].CONCLR=(1<<2);
    I2[0].CONCLR=(1<<3);
    waitForSi();
    dataRead[1] = I2[0].DAT;
    //Stop Sending Data
    I2[0].CONSET|=(1<<4);
    I2[0].CONCLR=(1<<3);
    while(((I2[0].CONSET>>4)&1)==1){
        //Do nothing until STO is 0
    }
    dataReturn = (dataRead[0]<<8);
    dataReturn += dataRead[1];
    dataReturn = (dataReturn>>5);
    return dataReturn;
}

int I2CSingleDataRead(int deviceAddress, int regAddress){
    int dataRead;
    //Send Start
    I2[0].CONSET=(1<<3);
    I2[0].CONSET=(1<<5);
    I2[0].CONCLR=(1<<3);
    waitForSi();
    I2[0].CONCLR=(1<<5);
    //First send devAdd << 1 +1 to indicate read mode
    I2[0].DAT=(deviceAddress<<1);
    I2[0].CONCLR=(1<<3);
    waitForSi();
    //then send Reg Add
    I2[0].DAT=regAddress;
    I2[0].CONCLR=(1<<3);
    waitForSi();
    //send new start
    I2[0].CONSET|=(1<<5);
    I2[0].CONCLR=(1<<3);
    waitForSi();
    I2[0].CONCLR=(1<<5);
    I2[0].DAT=(deviceAddress<<1)+1;
    I2[0].CONCLR=(1<<3);
    waitForSi();
    //get 1st Data
    I2[0].CONCLR=(1<<2);
    I2[0].CONCLR=(1<<3);
    waitForSi();
    dataRead = I2[0].DAT;
    //Stop Sending Data
    I2[0].CONSET|=(1<<4);
    I2[0].CONCLR=(1<<3);
    while(((I2[0].CONSET>>4)&1)==1){
        //Do nothing until STO is 0
    }
    return dataRead;
}

void setUpIOE(){
    I2CDataSend(0x00,0b0100000,0x00);
}

void setUpGPIO(){
    FIO[2].DIR|=(0b111<<10)|(1<<8);
    FIO[0].DIR|=(0b11<<2);
    FIO[0].DIR&=~(0b11);
    PINMODE0 |= (0b1111);
}

int readKeypad(){
    int inputPins[] = {7,6,5,4};
    int outputPins[] = {12,11,10,8};
    int button = 1;
    int outerCount = 0;
    int innerCount = 0;
    for(outerCount=0;outerCount<4;outerCount++){
        FIO2PIN = (1<<inputPins[outerCount]);
        for(innerCount=0;innerCount<4;innerCount++){
            if(((FIO[2].PIN>>outputPins[innerCount])&1)==1){
                return button;
            }
            button++;
        }
    }
    return 0;
}

void blinkTempLed(int ticks){
    int count = 0;
    while(count<ticks){
        FIO[2].PIN = (1<<8);
        wait_ticks(2);
        FIO[2].PIN &= ~(1<<8);
        wait_ticks(1);
        count++;
    }
}

void blinkRedLed(int ticks){
    int count = 0;
    while(count<ticks){
        FIO[2].PIN = (1<<10);
        wait_ticks(2);
        FIO[2].PIN &= ~(1<<10);
        wait_ticks(1);
        count++;
    }
}

void blinkGreenLed(int ticks){
    int count = 0;
    while(count<ticks){
        FIO[2].PIN = (1<<11);
        wait_ticks(2);
        FIO[2].PIN &= ~(1<<11);
        wait_ticks(1);
        count++;
    }
}

void blinkBlueLed(int ticks){
    int count = 0;
    while(count<ticks){
        FIO[2].PIN = (1<<12);
        wait_ticks(2);
        FIO[2].PIN &= ~(1<<12);
        wait_ticks(1);
        count++;
    }
}

float *readColorSensor(){
    float clearTime = 0;
    float redTime = 0;
    float greenTime = 0;
    float blueTime = 0;
    float freqPercentage[3] = {0,0,0};
    //set high 2 low 3
    FIO[0].PIN |= (1<<2);
    FIO[0].PIN &= ~(1<<3);
    //get clearTime
    //set low 2 low 3
    FIO[0].PIN &=~(1<<2);
    FIO[0].PIN &=~(1<<3);
    //get redTime
    //set high 2 high 3
    FIO[0].PIN |= (1<<2);
    FIO[0].PIN |= (1<<3);
    //get greenTime
    //set low 2 high 3
    FIO[0].PIN &=~(1<<2);
    FIO[0].PIN |= (1<<3);
    //get blue time
    //set freqPercent to red/clear,green/clear,blue/clear
    return freqPercentage;
}

int checkButtons(){
    if(((FIO[0].PIN)&1)==1){
        return 1;
    } else if((((FIO[0].PIN)>>1)&1)==1){
        return 2;
    } else{
        return 0;
    }
}

int main(void) {
    int buttonRead;
    enum operatingModes mode;
    mode = Temp;
    int temp = 0;
    int test = 0;
    setUpGPIO();
    setUpI2C();
    while(1) {
        switch(mode){
            case Temp:
                //temp = I2CSingleDataRead(0b1001000,0x00);
            break;
            case Color:
                //readColorSensor();
            break;
            default:
            break;
        }
        buttonRead = checkButtons();
        if(buttonRead = 1){
            if(mode>0){
                mode--;
            } else{
                mode = Sleep;
            }
        } else if (buttonRead = 2){
            if(mode<2){
                mode++;
            } else{
                mode = Temp;
            }
        }
        wait_ticks(200000);

        //blinkAtFreq(100000);
    }
    return 0 ;
}
